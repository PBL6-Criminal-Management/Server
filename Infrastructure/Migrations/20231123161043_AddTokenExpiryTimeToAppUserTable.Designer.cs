// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231123161043_AddTokenExpiryTimeToAppUserTable")]
    partial class AddTokenExpiryTimeToAppUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("group");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("token_expiry_time");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Case.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Charge")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("charge");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("CrimeScene")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("crime_scene");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MurderWeapon")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("murder_weapon");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<short>("TypeOfViolation")
                        .HasColumnType("smallint")
                        .HasColumnName("type_of_violation");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("case");
                });

            modelBuilder.Entity("Domain.Entities.CaseCriminal.CaseCriminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CriminalId")
                        .HasColumnType("bigint")
                        .HasColumnName("criminal_id");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CriminalId");

                    b.ToTable("case_criminal");
                });

            modelBuilder.Entity("Domain.Entities.CaseImage.CaseImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("case_image");
                });

            modelBuilder.Entity("Domain.Entities.CaseInvestigator.CaseInvestigator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("InvestigatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("investigator_id");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("InvestigatorId");

                    b.ToTable("case_investigator");
                });

            modelBuilder.Entity("Domain.Entities.CaseVictim.CaseVictim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<long>("VictimId")
                        .HasColumnType("bigint")
                        .HasColumnName("victim_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("VictimId");

                    b.ToTable("case_victim");
                });

            modelBuilder.Entity("Domain.Entities.CaseWitness.CaseWitness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<long>("WitnessId")
                        .HasColumnType("bigint")
                        .HasColumnName("witness_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("WitnessId");

                    b.ToTable("case_witness");
                });

            modelBuilder.Entity("Domain.Entities.CrimeReporting.CrimeReporting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("ReporterAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("reporter_address");

                    b.Property<string>("ReporterEmail")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reporter_email");

                    b.Property<string>("ReporterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reporter_name");

                    b.Property<string>("ReporterPhone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("reporter_phone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("crime_reporting");
                });

            modelBuilder.Entity("Domain.Entities.Criminal.Criminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AnotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("another_name");

                    b.Property<string>("ApproachArrange")
                        .HasColumnType("text")
                        .HasColumnName("approach_arrange");

                    b.Property<string>("BankAccount")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("bank_account");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("CareerAndWorkplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("career_and_workplace");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("characteristics");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("CurrentAccommodation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("current_accommodation");

                    b.Property<string>("DangerousLevel")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("dangerous_level");

                    b.Property<DateOnly>("DateOfMostRecentCrime")
                        .HasColumnType("date")
                        .HasColumnName("date_of_most_recent_crime");

                    b.Property<string>("EntryAndExitInformation")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("entry_and_exit_information");

                    b.Property<string>("Ethnicity")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ethnicity");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("facebook");

                    b.Property<DateOnly>("FatherBirthday")
                        .HasColumnType("date")
                        .HasColumnName("father_birthday");

                    b.Property<string>("FatherCitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("father_citizen_id");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("father_name");

                    b.Property<string>("GameAccount")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("game_account");

                    b.Property<ulong?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("home_town");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("MotherBirthday")
                        .HasColumnType("date")
                        .HasColumnName("mother_birthday");

                    b.Property<string>("MotherCitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("mother_citizen_id");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mother_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("other_information");

                    b.Property<string>("OtherSocialNetworks")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("other_social_networks");

                    b.Property<string>("PermanentResidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("permanent_residence");

                    b.Property<string>("PhoneModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phone_model");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("religion");

                    b.Property<string>("Research")
                        .HasColumnType("text")
                        .HasColumnName("research");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Vehicles")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("vehicles");

                    b.Property<string>("Zalo")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("zalo");

                    b.HasKey("Id");

                    b.ToTable("criminal");
                });

            modelBuilder.Entity("Domain.Entities.CriminalImage.CriminalImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CriminalId")
                        .HasColumnType("bigint")
                        .HasColumnName("criminal_id");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CriminalId");

                    b.ToTable("criminal_image");
                });

            modelBuilder.Entity("Domain.Entities.Evidence.Evidence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("evidence");
                });

            modelBuilder.Entity("Domain.Entities.ReportingImage.ReportingImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<long>("ReportingId")
                        .HasColumnType("bigint")
                        .HasColumnName("reporting_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ReportingId");

                    b.ToTable("reporting_image");
                });

            modelBuilder.Entity("Domain.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<ulong?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Domain.Entities.Victim.Victim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<ulong?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("victim");
                });

            modelBuilder.Entity("Domain.Entities.WantedCriminal.WantedCriminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("CriminalId")
                        .HasColumnType("bigint")
                        .HasColumnName("criminal_id");

                    b.Property<string>("CurrentActivity")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("current_activity");

                    b.Property<string>("DecisionMakingUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("decision_making_unit");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateOnly>("WantedDecisionDay")
                        .HasColumnType("date")
                        .HasColumnName("wanted_decision_day");

                    b.Property<string>("WantedDecisionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("wanted_decision_no");

                    b.Property<short>("WantedType")
                        .HasColumnType("smallint")
                        .HasColumnName("wanted_type");

                    b.HasKey("Id");

                    b.HasIndex("CriminalId");

                    b.ToTable("wanted_criminal");
                });

            modelBuilder.Entity("Domain.Entities.Witness.Witness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Testimony")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("testimony");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("witness");
                });

            modelBuilder.Entity("Infrastructure.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.CaseCriminal.CaseCriminal", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("CaseCriminals")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Criminal.Criminal", "Criminal")
                        .WithMany("CaseCriminals")
                        .HasForeignKey("CriminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Criminal");
                });

            modelBuilder.Entity("Domain.Entities.CaseImage.CaseImage", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("CaseImages")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Domain.Entities.CaseInvestigator.CaseInvestigator", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("CaseInvestigators")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.User", "Investigator")
                        .WithMany("CaseInvestigators")
                        .HasForeignKey("InvestigatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Investigator");
                });

            modelBuilder.Entity("Domain.Entities.CaseVictim.CaseVictim", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("CaseVictims")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Victim.Victim", "Victim")
                        .WithMany("CaseVictims")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("Domain.Entities.CaseWitness.CaseWitness", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("CaseWitnesses")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Witness.Witness", "Witness")
                        .WithMany("CaseWitnesses")
                        .HasForeignKey("WitnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Witness");
                });

            modelBuilder.Entity("Domain.Entities.CriminalImage.CriminalImage", b =>
                {
                    b.HasOne("Domain.Entities.Criminal.Criminal", "Criminal")
                        .WithMany("CriminalImages")
                        .HasForeignKey("CriminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criminal");
                });

            modelBuilder.Entity("Domain.Entities.Evidence.Evidence", b =>
                {
                    b.HasOne("Domain.Entities.Case.Case", "Case")
                        .WithMany("Evidences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Domain.Entities.ReportingImage.ReportingImage", b =>
                {
                    b.HasOne("Domain.Entities.CrimeReporting.CrimeReporting", "CrimeReporting")
                        .WithMany("ReportingImages")
                        .HasForeignKey("ReportingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrimeReporting");
                });

            modelBuilder.Entity("Domain.Entities.WantedCriminal.WantedCriminal", b =>
                {
                    b.HasOne("Domain.Entities.Criminal.Criminal", "Criminal")
                        .WithMany("WantedCriminals")
                        .HasForeignKey("CriminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criminal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Domain.Entities.Case.Case", b =>
                {
                    b.Navigation("CaseCriminals");

                    b.Navigation("CaseImages");

                    b.Navigation("CaseInvestigators");

                    b.Navigation("CaseVictims");

                    b.Navigation("CaseWitnesses");

                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("Domain.Entities.CrimeReporting.CrimeReporting", b =>
                {
                    b.Navigation("ReportingImages");
                });

            modelBuilder.Entity("Domain.Entities.Criminal.Criminal", b =>
                {
                    b.Navigation("CaseCriminals");

                    b.Navigation("CriminalImages");

                    b.Navigation("WantedCriminals");
                });

            modelBuilder.Entity("Domain.Entities.User.User", b =>
                {
                    b.Navigation("CaseInvestigators");
                });

            modelBuilder.Entity("Domain.Entities.Victim.Victim", b =>
                {
                    b.Navigation("CaseVictims");
                });

            modelBuilder.Entity("Domain.Entities.Witness.Witness", b =>
                {
                    b.Navigation("CaseWitnesses");
                });
#pragma warning restore 612, 618
        }
    }
}
